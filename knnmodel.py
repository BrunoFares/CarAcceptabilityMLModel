def run_knn_model():    import pandas as pd    from scipy.io import arff    from sklearn.model_selection import train_test_split    from sklearn.preprocessing import LabelEncoder    from sklearn.neighbors import KNeighborsClassifier    from sklearn.metrics import classification_report, accuracy_score    import matplotlib.pyplot as plt        # Step 1: Load ARFF file    data, meta = arff.loadarff('php2jDIhh.arff')    df = pd.DataFrame(data)        # Step 2: Decode byte strings    for col in df.columns:        if df[col].dtype == object:            df[col] = df[col].str.decode('utf-8')        # Step 3: Encode categorical columns    le = LabelEncoder()    for col in df.columns:        df[col] = le.fit_transform(df[col])        # Step 4: Split into features and labels    X = df.drop('class', axis=1)    y = df['class']        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)        # Step 5: Train KNN (initial with k=5)    knn = KNeighborsClassifier(n_neighbors=5)    knn.fit(X_train, y_train)        # Step 6: Test and evaluate    y_pred = knn.predict(X_test)    print("Initial K=5 Model:")    print("Accuracy:", accuracy_score(y_test, y_pred))    print("\nClassification Report:\n", classification_report(y_test, y_pred))        # Step 7: Tune k value    k_values = list(range(1, 20, 2))  # 1, 3, 5, ..., 19    accuracies = []     for k in k_values:          knn = KNeighborsClassifier(n_neighbors=k)          knn.fit(X_train, y_train)          y_pred = knn.predict(X_test)          acc = accuracy_score(y_test, y_pred)          accuracies.append(acc)          print(f"k={k}, Accuracy={acc:.4f}")    def accuracygraph():        # Step 8: Plot accuracy vs k        plt.figure(figsize=(10,6))        plt.plot(k_values, accuracies, marker='o')        plt.title('KNN Accuracy for different k values')        plt.xlabel('Number of Neighbors (k)')        plt.ylabel('Accuracy')        plt.xticks(k_values)        plt.grid(True)        plt.show()        # Step 9: Best k    best_k_index = accuracies.index(max(accuracies))    best_k = k_values[best_k_index]        print(f"\nâœ… Best k = {best_k} with Accuracy = {accuracies[best_k_index]:.4f}")    accuracygraph()