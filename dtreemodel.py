def run_dtree_model():    from scipy.io import arff    import pandas as pd    from sklearn.preprocessing import LabelEncoder    from sklearn.tree import DecisionTreeClassifier,plot_tree    from sklearn.model_selection import train_test_split    import matplotlib.pyplot as plt    from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay    import seaborn as sns    data, meta = arff.loadarff('php2jDIhh.arff')            df = pd.DataFrame(data)        label_encoder = LabelEncoder()        for column in df.columns:        df[column] = label_encoder.fit_transform(df[column])           X = df.drop('class',axis=1)    y = df['class']        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)        model = DecisionTreeClassifier(max_depth=11,random_state=42)        # Train the model    model.fit(X_train, y_train)        depth_values = range(1, 21, 2)  # Try odd depths from 1 to 20    accuracies = []        for depth in depth_values:        clf = DecisionTreeClassifier(max_depth=depth, random_state=42)        clf.fit(X_train, y_train)        acc = clf.score(X_test, y_test)        accuracies.append(acc)        print(f"max_depth={depth}, Accuracy={acc:.4f}")        def correlations():        plt.figure(figsize=(10,8))        sns.heatmap(df.corr(), annot=True, cmap='coolwarm')        plt.title('Correlation Matrix')        plt.show()    def plotgrapher():        classios = [label.decode('utf-8') for label in label_encoder.classes_]        plt.figure(figsize=(60, 40))  # Make the figure bigger        plot_tree(model, filled=True, feature_names=X.columns, class_names=classios, fontsize=10)        plt.title('Decision Tree for Car Evaluation')        plt.show()    def confusionmatrix():        y_pred = model.predict(X_test)    # Create the confusion matrix        cm = confusion_matrix(y_test, y_pred)        classios = [label.decode('utf-8') for label in label_encoder.classes_]    # Display the confusion matrix with class names        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classios)        disp.plot(cmap='Blues')  # You can change the color if you want        plt.title("Confusion Matrix")        plt.show()            def outliers():         for col in df.columns:            plt.figure(figsize=(6,4))            sns.boxplot(x=df[col])            plt.title(f'Boxplot for {col}')            plt.show()    def classdistribution():        # Check the percentage distribution of each encoded class        class_distribution = df['class'].value_counts(normalize=True) * 100            # Convert the encoded values back to the original class labels (if you used Label Encoding)        class_distribution = class_distribution.rename(index=dict(enumerate(label_encoder.classes_)))        # Print the distribution in percentages        print("Class distribution (percentage):\n", class_distribution)    def accuracygraph():        # Step 8: Plot accuracy vs k        plt.figure(figsize=(10,6))        plt.plot(depth_values, accuracies, marker='o')        plt.title('Dtree Accuracy for different Max depth values')        plt.xlabel('Max depth')        plt.ylabel('Accuracy')        plt.xticks(depth_values)        plt.grid(True)        plt.show()                   def missingvalues():         missing_values = df.isnull().sum()        print(missing_values)            print("Test Accuracy at max_depth >= 11:", model.score(X_test, y_test))    accuracygraph()    